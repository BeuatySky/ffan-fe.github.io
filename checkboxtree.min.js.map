{"version":3,"sources":["webpack:///checkboxtree.min.js","webpack:///./client/app/components/checkboxtree/checkboxtree.js","webpack:///./client/app/components/checkboxtree/checkboxtree.component.js","webpack:///./client/app/components/checkboxtree/checkboxtree.html","webpack:///./client/app/components/checkboxtree/checkboxtree.controller.js","webpack:///./client/app/components/checkboxtree/checkboxtree.less?d15e","webpack:///./client/app/components/checkboxtree/checkboxtree.less","webpack:///./~/fancyui/lib/checkboxtree/index.js","webpack:///./~/fancyui/lib/checkboxtree/component.js","webpack:///./~/fancyui/lib/checkboxtree/template.html","webpack:///./~/fancyui/lib/checkboxtree/controller.js","webpack:///./~/fancyui/lib/checkboxtree/default.config.js","webpack:///./~/fancyui/lib/checkboxtree/style.less?cce9","webpack:///./~/fancyui/lib/checkboxtree/style.less"],"names":["webpackJsonp","492","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_checkboxtree","_checkboxtree2","_checkboxtree3","_checkboxtree4","angular","name","component","493","restrict","bindings","template","controller","controllerAs","494","495","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","CheckboxtreeController","$q","$state","this","loadPromise","mockService","mock","categoryId","child","config","fieldOfChildren","fieldOfName","fieldOfId","form","category","$inject","self","data","deferred","defer","resolve","promise","496","content","id","locals","497","push","500","_component","_component2","checkboxtreeModule","501","_template","_template2","_controller","_controller2","checkboxtreeComponent","listPromise","ngDisabled","ngModel","502","503","_typeof","Symbol","iterator","constructor","_defaultConfig","_defaultConfig2","_this","assign","then","responce","list","formatList","node","toggleUpNode","toggleDownNode","updateModel","flag","siblings","getSiblings","forEach","item","checked","parent","getNode","_this2","_this3","position","index","splice","copy","checkedItems","_this4","targetNode","_this5","_ret","v","_this6","walkList","504","Config","505","506"],"mappings":"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","file":"checkboxtree.min.js","sourcesContent":["webpackJsonp([21],{\n\n/***/ 492:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _checkboxtree = __webpack_require__(493);\n\t\n\tvar _checkboxtree2 = _interopRequireDefault(_checkboxtree);\n\t\n\t__webpack_require__(498);\n\t\n\tvar _checkboxtree3 = __webpack_require__(500);\n\t\n\tvar _checkboxtree4 = _interopRequireDefault(_checkboxtree3);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = angular.module('democheckboxtree', ['ui.tree', _checkboxtree4.default.name]).component('democheckboxtree', _checkboxtree2.default);\n\n/***/ },\n\n/***/ 493:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _checkboxtree = __webpack_require__(494);\n\t\n\tvar _checkboxtree2 = _interopRequireDefault(_checkboxtree);\n\t\n\tvar _checkboxtree3 = __webpack_require__(495);\n\t\n\tvar _checkboxtree4 = _interopRequireDefault(_checkboxtree3);\n\t\n\t__webpack_require__(496);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  restrict: 'E',\n\t  bindings: {},\n\t  template: _checkboxtree2.default,\n\t  controller: _checkboxtree4.default,\n\t  controllerAs: 'vm'\n\t};\n\n/***/ },\n\n/***/ 494:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<section class=\\\"intro-content\\\">\\n\\t<h1 translate='{{vm.$state.current.name}}'></h1>\\n</section>\\n\\n<section class=\\\"intro-content\\\">\\n\\t<h2>{{'Install' | translate}}</h2>\\n\\t<p>{{'Install_FancyUI'|translate}}</p>\\n</section>\\n\\n<div class=\\\"example-block\\\">\\n\\t<div class=\\\"highlight\\\" hljs hljs-language=\\\"bash\\\">\\nnpm install fancyui --save\\nnpm install angular-ui-tree --save</div>\\n</div>\\n\\n<section class=\\\"intro-content\\\">\\n\\t<h2>{{'Inject_Module'|translate}}</h2>\\n</section>\\n\\n<div class=\\\"example-block no-border\\\">\\n\\t<div class=\\\"highlight\\\" hljs hljs-language=\\\"javascript\\\">\\nimport checkboxtreeComponent from './checkboxtree.component';\\nimport 'angular-ui-tree';\\nimport {checkboxtree} from 'fancyui';\\nexport default angular.module('checkboxtree', [\\n  'ui.tree',\\n  checkboxtree.name\\n])\\n.component('checkboxtree', checkboxtreeComponent);</div>\\n</div>\\n\\n<h2>{{'Example'|translate}}</h2>\\n<div class=\\\"example-block\\\">\\n\\t<div class=\\\"bs-example pop-confirm-example\\\">\\n\\t\\t<bp-checkboxtree \\n\\t\\t\\tlist-promise=\\\"vm.loadPromise\\\" \\n\\t\\t\\tng-model=\\\"vm.form.category\\\"\\n\\t\\t\\tconfig=\\\"vm.config\\\"></bp-checkboxtree>\\n\\t</div>\\n</div>\\n\\n<h2>{{'Basic_Usage'|translate}}</h2>\\n<h3>view</h3>\\n<div class=\\\"example-block no-border\\\">\\n<div class=\\\"highlight\\\" hljs hljs-no-escape>\\n&lt;bp-checkboxtree \\n  list-promise=\\\"vm.loadPromise\\\" \\n  ng-model=\\\"vm.form.category\\\"\\n  config=\\\"vm.config\\\"&gt;\\n&lt;/bp-checkboxtree&gt;\\n</div>\\n</div>\\n\\n<h3>controller</h3>\\n<div class=\\\"example-block no-border\\\">\\n<div class=\\\"highlight\\\" hljs hljs-language=\\\"javascript\\\">\\n/**演示mock 数据 */\\nthis.loadPromise = this.mockService().mock([{\\n    name: '第一个节点',\\n    categoryId: 1001,\\n    child: [{\\n      name: '第一个节点的子节点',\\n      categoryId: 1001001\\n  },{\\n      name:'第一个节点的子节点2',\\n      categoryId: 1001002\\n\\t}]\\n  },\\n  {\\n    name: '第二个节点(没有子节点)',\\n    categoryId: 1002\\n  }]);\\n\\n//这个配置用于避免或减少数据转换\\nthis.config = {\\n  //指示子节点的字段名\\n  fieldOfChildren: 'child',\\n  //指示节点名的字段\\n  fieldOfName: 'name',\\n  //指示节点id的字段\\n  fieldOfId: 'categoryId'\\n};\\n\\nthis.form = {};\\n/**发送给服务端的数据，以及数据回填操作 */\\nthis.form.category = [\\n{\\n  name: '第二个节点(没有子节点)',\\n  categoryId: 1002\\n}];\\n</div>\\n</div>\\n\"\n\n/***/ },\n\n/***/ 495:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar CheckboxtreeController = function () {\n\t  CheckboxtreeController.$inject = [\"$q\", \"$state\"];\n\t  function CheckboxtreeController($q, $state) {\n\t    'ngInject';\n\t\n\t    _classCallCheck(this, CheckboxtreeController);\n\t\n\t    this.$state = $state;\n\t    this.$q = $q;\n\t    /** service 获取数据  */\n\t    this.loadPromise = this.mockService().mock([{\n\t      name: '第一个节点',\n\t      categoryId: 1001,\n\t      child: [{\n\t        name: '第一个节点的子节点',\n\t        categoryId: 1001001\n\t      }, {\n\t        name: '第一个节点的子节点2',\n\t        categoryId: 1001002\n\t      }]\n\t    }, {\n\t      name: '第二个节点(没有子节点)',\n\t      categoryId: 1002\n\t    }]);\n\t\n\t    //这个配置用于避免或减少数据转换\n\t    this.config = {\n\t      //指示子节点的字段名\n\t      fieldOfChildren: 'child',\n\t      //指示节点名的字段\n\t      fieldOfName: 'name',\n\t      //指示节点id的字段\n\t      fieldOfId: 'categoryId'\n\t    };\n\t\n\t    this.form = {};\n\t\n\t    /**发送给服务端的数据，以及数据回填操作 */\n\t    this.form.category = [{\n\t      name: '第二个节点(没有子节点)',\n\t      categoryId: 1002\n\t    }];\n\t  }\n\t\n\t  _createClass(CheckboxtreeController, [{\n\t    key: 'mockService',\n\t    value: function mockService() {\n\t      var self = this;\n\t      return {\n\t        mock: function mock(data) {\n\t          var deferred = self.$q.defer();\n\t          deferred.resolve(data);\n\t          return deferred.promise;\n\t        }\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return CheckboxtreeController;\n\t}();\n\t\n\texports.default = CheckboxtreeController;\n\n/***/ },\n\n/***/ 496:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(497);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(100)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/less-loader/index.js!./checkboxtree.less\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/less-loader/index.js!./checkboxtree.less\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n\n/***/ 497:\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(94)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n\n/***/ 500:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _component = __webpack_require__(501);\n\t\n\tvar _component2 = _interopRequireDefault(_component);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar checkboxtreeModule = angular.module('checkboxtree', []).component('bpCheckboxtree', _component2.default);\n\t\n\texports.default = checkboxtreeModule;\n\n/***/ },\n\n/***/ 501:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _template = __webpack_require__(502);\n\t\n\tvar _template2 = _interopRequireDefault(_template);\n\t\n\tvar _controller = __webpack_require__(503);\n\t\n\tvar _controller2 = _interopRequireDefault(_controller);\n\t\n\t__webpack_require__(505);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar checkboxtreeComponent = {\n\t  restrict: 'E',\n\t  bindings: {\n\t    listPromise: '=',\n\t    ngDisabled: '=',\n\t    ngModel: '=',\n\t    config: '<'\n\t  },\n\t  template: _template2.default,\n\t  controller: _controller2.default,\n\t  controllerAs: 'vm'\n\t};\n\t\n\texports.default = checkboxtreeComponent;\n\n/***/ },\n\n/***/ 502:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div ui-tree id=\\\"tree-root\\\" data-nodrop-enabled=\\\"true\\\" data-drag-enabled=\\\"false\\\">\\n  <ol ui-tree-nodes ng-model=\\\"vm.list\\\" class=\\\"ui-tree-ol\\\">\\n    <li ng-repeat=\\\"node in vm.list\\\" ui-tree-node ng-include=\\\"'goods_nodes_renderer.html'\\\" collapsed=\\\"true\\\"></li>\\n  </ol>\\n</div>\\n<script type=\\\"text/ng-template\\\" id=\\\"goods_nodes_renderer.html\\\">\\n  <div ui-tree-handle class=\\\"tree-node tree-node-content\\\">\\n    <a class=\\\"toggle-btn\\\" ng-if=\\\"node[vm.config.fieldOfChildren] && node[vm.config.fieldOfChildren].length > 0\\\" data-nodrag ng-click=\\\"toggle(this)\\\">\\n      <span class=\\\"glyphicon\\\"\\n            ng-class=\\\"{\\n          'glyphicon-chevron-right': collapsed,\\n          'glyphicon-chevron-down': !collapsed\\n        }\\\"></span>\\n    </a>\\n    <label class=\\\"goods-node\\\">\\n      <input type=\\\"checkbox\\\"\\n             ng-model=\\\"node.checked\\\"\\n             ng-click=\\\"vm.nodeClickHandler(node)\\\"\\n             ng-disabled=\\\"vm.ngDisabled\\\"/>\\n      <span class=\\\"glyphicon goods-node-icon\\\"\\n            ng-class=\\\"{\\n          'glyphicon-folder-open': node[vm.config.fieldOfChildren] && !collapsed,\\n          'glyphicon-folder-close': node[vm.config.fieldOfChildren] && collapsed,\\n          'glyphicon-file': !node[vm.config.fieldOfChildren]\\n        }\\\"></span>\\n      {{node[vm.config.fieldOfName] || \\\"地级市地方\\\"}}\\n    </label>\\n  </div>\\n  <ol ui-tree-nodes=\\\"\\\" ng-model=\\\"node[vm.config.fieldOfChildren]\\\" ng-class=\\\"{hidden: collapsed}\\\">\\n    <li ng-repeat=\\\"node in node[vm.config.fieldOfChildren]\\\" ui-tree-node ng-include=\\\"'goods_nodes_renderer.html'\\\" collapsed=\\\"true\\\">\\n    </li>\\n  </ol>\\n</script>\\n\"\n\n/***/ },\n\n/***/ 503:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _defaultConfig = __webpack_require__(504);\n\t\n\tvar _defaultConfig2 = _interopRequireDefault(_defaultConfig);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar CheckboxtreeController = function () {\n\t  function CheckboxtreeController() {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, CheckboxtreeController);\n\t\n\t    this.name = 'checkboxtree';\n\t    this.config = Object.assign({}, _defaultConfig2.default, this.config);\n\t    this.listPromise.then(function (responce) {\n\t      _this.list = responce;\n\t      _this.formatList(_this.list, _this.ngModel);\n\t    });\n\t    this.ngModel ? '' : this.ngModel = [];\n\t  }\n\t\n\t  /**\n\t   * 节点点击处理：\n\t   * 1. 如果点击的是叶节点：\n\t   *   1.1如果所有兄弟节点都已选中：\n\t   *      1.1.1 如果此节点是checked状态\n\t   *          1.1.1.1 把父节点的状态置为checked\n\t   *          1.1.1.2 重复步骤1.1\n\t   *      1.1.2 如果此节点是unchecked的状态\n\t   *          1.1.2.1 把父节点的状态置为unchecked\n\t   *          1.1.2.1 重复执行1.1\n\t   * 2. 如果点击的是父节点：\n\t   *    2.1 执行1的逻辑；\n\t   *    2.2 toggle所有子节点的check状态:\n\t   * 3. 更新保存已选中节点的数组;\n\t   */\n\t\n\t\n\t  _createClass(CheckboxtreeController, [{\n\t    key: 'nodeClickHandler',\n\t    value: function nodeClickHandler(node) {\n\t      if (!node[this.config.fieldOfChildren]) {\n\t        this.toggleUpNode(node);\n\t      } else {\n\t        this.toggleUpNode(node);\n\t        this.toggleDownNode(node);\n\t      }\n\t      this.updateModel(node);\n\t    }\n\t\n\t    /**\n\t     * 根据当前节点的checked状态来向上改变父级节点的状态\n\t     */\n\t\n\t  }, {\n\t    key: 'toggleUpNode',\n\t    value: function toggleUpNode(node) {\n\t      var flag = true,\n\t          //标记父级状态是否由当前节点决定\n\t      siblings = this.getSiblings(node);\n\t      if (siblings && siblings) {\n\t        siblings.forEach(function (item) {\n\t          if (!item.checked) {\n\t            flag = false;\n\t          }\n\t        });\n\t      }\n\t      if (flag && node.parent) {\n\t        //只有此情况下父节点的check状态才和当前节点有关，且和当前节点的checked状态一致\n\t        var parent = this.getNode(node.parent, this.list);\n\t        parent.checked = node.checked;\n\t        this.updateModel(parent);\n\t        this.toggleUpNode(parent);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * 根据当前节点的checked状态来向下改变子级节点的状态\n\t     */\n\t\n\t  }, {\n\t    key: 'toggleDownNode',\n\t    value: function toggleDownNode(node) {\n\t      var _this2 = this;\n\t\n\t      if (node[this.config.fieldOfChildren]) {\n\t        node[this.config.fieldOfChildren].forEach(function (item) {\n\t          item.checked = node.checked;\n\t          _this2.updateModel(item);\n\t          _this2.toggleDownNode(item);\n\t        });\n\t      }\n\t    }\n\t\n\t    /**\n\t     * 监听点击事件，更新保存已选中节点\n\t     * @param node\n\t     */\n\t\n\t  }, {\n\t    key: 'updateModel',\n\t    value: function updateModel(node) {\n\t      var _this3 = this;\n\t\n\t      if (node.checked) {\n\t        this.ngModel.push(node);\n\t      } else {\n\t        var position = void 0;\n\t        this.ngModel.forEach(function (item, index) {\n\t          if (item[_this3.config.fieldOfId] == node[_this3.config.fieldOfId]) {\n\t            position = index;\n\t            return;\n\t          }\n\t        });\n\t        this.ngModel.splice(position, 1);\n\t      }\n\t      this.ngModel = angular.copy(this.ngModel);\n\t    }\n\t\n\t    /**\n\t     * 根据ng-model传进来的checkedItems，来处理list，设置节点checked属性\n\t     * @param list\n\t     * @param checkedItems\n\t     */\n\t\n\t  }, {\n\t    key: 'formatList',\n\t    value: function formatList(list, checkedItems) {\n\t      var _this4 = this;\n\t\n\t      checkedItems.forEach(function (item) {\n\t        var targetNode = _this4.getNode(item[_this4.config.fieldOfId], list);\n\t        if (targetNode) {\n\t          targetNode.checked = true;\n\t        }\n\t      });\n\t    }\n\t\n\t    /**\n\t     * 以下都是工具函数\n\t     */\n\t    /**\n\t     * 根据节点来获取兄弟节点（不包含当前节点）\n\t     * @param node\n\t     */\n\t\n\t  }, {\n\t    key: 'getSiblings',\n\t    value: function getSiblings(node) {\n\t      var _this5 = this;\n\t\n\t      if (node.parent) {\n\t        var _ret = function () {\n\t          var parent = _this5.getNode(node.parent, _this5.list);\n\t          var copy = angular.copy(parent[_this5.config.fieldOfChildren]);\n\t          copy.forEach(function (item, index) {\n\t            if (item[_this5.config.fieldOfId] == node[_this5.config.fieldOfId]) {\n\t              copy.splice(index, 1);\n\t            }\n\t          });\n\t          return {\n\t            v: copy\n\t          };\n\t        }();\n\t\n\t        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * 根据节点id来获取节点\n\t     * @param id\n\t     */\n\t\n\t  }, {\n\t    key: 'getNode',\n\t    value: function getNode(id, list) {\n\t      var _this6 = this;\n\t\n\t      var targetNode = void 0;\n\t      var walkList = function walkList(id, list) {\n\t        list.forEach(function (item) {\n\t          if (item[_this6.config.fieldOfId] == id) {\n\t            targetNode = item;\n\t            return false;\n\t          }\n\t          if (item[_this6.config.fieldOfChildren]) {\n\t            walkList(id, item[_this6.config.fieldOfChildren]);\n\t          }\n\t        });\n\t      };\n\t      walkList(id, list);\n\t      return targetNode;\n\t    }\n\t  }]);\n\t\n\t  return CheckboxtreeController;\n\t}();\n\t\n\texports.default = CheckboxtreeController;\n\n/***/ },\n\n/***/ 504:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Created by fjywan on 16/6/20.\n\t */\n\t//此配置主要用于避免或减少数据转换\n\tvar Config = {\n\t  //指示子节点的字段名\n\t  fieldOfChildren: 'children',\n\t  //指示节点名的字段\n\t  fieldOfName: 'categoryName',\n\t  //指示节点id的字段\n\t  fieldOfId: 'categoryId'\n\t};\n\t\n\texports.default = Config;\n\n/***/ },\n\n/***/ 505:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(506);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(100)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../../css-loader/index.js!./../../../less-loader/index.js!./style.less\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../../css-loader/index.js!./../../../less-loader/index.js!./style.less\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n\n/***/ 506:\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(94)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \".checkboxtree{color:red}#tree-root ol{list-style:none}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// checkboxtree.min.js","import checkboxtreeComponent from './checkboxtree.component';\nimport 'angular-ui-tree';\nimport {checkboxtree} from 'fancyui';\n\nexport default angular.module('democheckboxtree', [\n  'ui.tree',\n  checkboxtree.name\n])\n.component('democheckboxtree', checkboxtreeComponent);\n\n\n\n// WEBPACK FOOTER //\n// ./client/app/components/checkboxtree/checkboxtree.js","import template from './checkboxtree.html';\nimport controller from './checkboxtree.controller';\nimport './checkboxtree.less';\n\nexport default {\n  restrict: 'E',\n  bindings: {},\n  template,\n  controller,\n  controllerAs: 'vm'\n};\n\n\n\n// WEBPACK FOOTER //\n// ./client/app/components/checkboxtree/checkboxtree.component.js","module.exports = \"<section class=\\\"intro-content\\\">\\n\\t<h1 translate='{{vm.$state.current.name}}'></h1>\\n</section>\\n\\n<section class=\\\"intro-content\\\">\\n\\t<h2>{{'Install' | translate}}</h2>\\n\\t<p>{{'Install_FancyUI'|translate}}</p>\\n</section>\\n\\n<div class=\\\"example-block\\\">\\n\\t<div class=\\\"highlight\\\" hljs hljs-language=\\\"bash\\\">\\nnpm install fancyui --save\\nnpm install angular-ui-tree --save</div>\\n</div>\\n\\n<section class=\\\"intro-content\\\">\\n\\t<h2>{{'Inject_Module'|translate}}</h2>\\n</section>\\n\\n<div class=\\\"example-block no-border\\\">\\n\\t<div class=\\\"highlight\\\" hljs hljs-language=\\\"javascript\\\">\\nimport checkboxtreeComponent from './checkboxtree.component';\\nimport 'angular-ui-tree';\\nimport {checkboxtree} from 'fancyui';\\nexport default angular.module('checkboxtree', [\\n  'ui.tree',\\n  checkboxtree.name\\n])\\n.component('checkboxtree', checkboxtreeComponent);</div>\\n</div>\\n\\n<h2>{{'Example'|translate}}</h2>\\n<div class=\\\"example-block\\\">\\n\\t<div class=\\\"bs-example pop-confirm-example\\\">\\n\\t\\t<bp-checkboxtree \\n\\t\\t\\tlist-promise=\\\"vm.loadPromise\\\" \\n\\t\\t\\tng-model=\\\"vm.form.category\\\"\\n\\t\\t\\tconfig=\\\"vm.config\\\"></bp-checkboxtree>\\n\\t</div>\\n</div>\\n\\n<h2>{{'Basic_Usage'|translate}}</h2>\\n<h3>view</h3>\\n<div class=\\\"example-block no-border\\\">\\n<div class=\\\"highlight\\\" hljs hljs-no-escape>\\n&lt;bp-checkboxtree \\n  list-promise=\\\"vm.loadPromise\\\" \\n  ng-model=\\\"vm.form.category\\\"\\n  config=\\\"vm.config\\\"&gt;\\n&lt;/bp-checkboxtree&gt;\\n</div>\\n</div>\\n\\n<h3>controller</h3>\\n<div class=\\\"example-block no-border\\\">\\n<div class=\\\"highlight\\\" hljs hljs-language=\\\"javascript\\\">\\n/**演示mock 数据 */\\nthis.loadPromise = this.mockService().mock([{\\n    name: '第一个节点',\\n    categoryId: 1001,\\n    child: [{\\n      name: '第一个节点的子节点',\\n      categoryId: 1001001\\n  },{\\n      name:'第一个节点的子节点2',\\n      categoryId: 1001002\\n\\t}]\\n  },\\n  {\\n    name: '第二个节点(没有子节点)',\\n    categoryId: 1002\\n  }]);\\n\\n//这个配置用于避免或减少数据转换\\nthis.config = {\\n  //指示子节点的字段名\\n  fieldOfChildren: 'child',\\n  //指示节点名的字段\\n  fieldOfName: 'name',\\n  //指示节点id的字段\\n  fieldOfId: 'categoryId'\\n};\\n\\nthis.form = {};\\n/**发送给服务端的数据，以及数据回填操作 */\\nthis.form.category = [\\n{\\n  name: '第二个节点(没有子节点)',\\n  categoryId: 1002\\n}];\\n</div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/app/components/checkboxtree/checkboxtree.html\n// module id = 494\n// module chunks = 21","\nexport default class CheckboxtreeController {\n  constructor($q,$state) {\n    'ngInject'\n    this.$state= $state;\n    this.$q = $q;\n    /** service 获取数据  */\n    this.loadPromise = this.mockService().mock([{\n      name: '第一个节点',\n      categoryId: 1001,\n      child: [{\n        name: '第一个节点的子节点',\n        categoryId: 1001001\n      },\n      {\n        name: '第一个节点的子节点2',\n        categoryId: 1001002\n      }]\n    },\n      {\n        name: '第二个节点(没有子节点)',\n        categoryId: 1002\n      }]);\n\n    //这个配置用于避免或减少数据转换\n    this.config = {\n      //指示子节点的字段名\n      fieldOfChildren: 'child',\n      //指示节点名的字段\n      fieldOfName: 'name',\n      //指示节点id的字段\n      fieldOfId: 'categoryId'\n    };\n\n    this.form = {};\n\n    /**发送给服务端的数据，以及数据回填操作 */\n    this.form.category = [\n      {\n        name: '第二个节点(没有子节点)',\n        categoryId: 1002\n      }];\n\n  }\n\n  mockService() {\n    let self = this;\n    return {\n      mock(data) {\n        let deferred = self.$q.defer();\n        deferred.resolve(data);\n        return deferred.promise;\n      }\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./client/app/components/checkboxtree/checkboxtree.controller.js","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/less-loader/index.js!./checkboxtree.less\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/less-loader/index.js!./checkboxtree.less\", function() {\n\t\t\tvar newContent = require(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/less-loader/index.js!./checkboxtree.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/app/components/checkboxtree/checkboxtree.less\n// module id = 496\n// module chunks = 21","exports = module.exports = require(\"./../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./~/less-loader!./client/app/components/checkboxtree/checkboxtree.less\n// module id = 497\n// module chunks = 21","import checkboxtreeComponent from './component.js';\n\nlet checkboxtreeModule = angular.module('checkboxtree', [\n])\n\n.component('bpCheckboxtree', checkboxtreeComponent);\n\nexport default checkboxtreeModule;\n\n\n\n// WEBPACK FOOTER //\n// ./~/fancyui/lib/checkboxtree/index.js","import template from './template.html';\nimport controller from './controller.js';\nimport './style.less';\n\nlet checkboxtreeComponent = {\n  restrict: 'E',\n  bindings: {\n    listPromise: '=',\n    ngDisabled: '=',\n    ngModel: '=',\n    config: '<'\n  },\n  template,\n  controller,\n  controllerAs: 'vm'\n};\n\nexport default checkboxtreeComponent;\n\n\n\n// WEBPACK FOOTER //\n// ./~/fancyui/lib/checkboxtree/component.js","module.exports = \"<div ui-tree id=\\\"tree-root\\\" data-nodrop-enabled=\\\"true\\\" data-drag-enabled=\\\"false\\\">\\n  <ol ui-tree-nodes ng-model=\\\"vm.list\\\" class=\\\"ui-tree-ol\\\">\\n    <li ng-repeat=\\\"node in vm.list\\\" ui-tree-node ng-include=\\\"'goods_nodes_renderer.html'\\\" collapsed=\\\"true\\\"></li>\\n  </ol>\\n</div>\\n<script type=\\\"text/ng-template\\\" id=\\\"goods_nodes_renderer.html\\\">\\n  <div ui-tree-handle class=\\\"tree-node tree-node-content\\\">\\n    <a class=\\\"toggle-btn\\\" ng-if=\\\"node[vm.config.fieldOfChildren] && node[vm.config.fieldOfChildren].length > 0\\\" data-nodrag ng-click=\\\"toggle(this)\\\">\\n      <span class=\\\"glyphicon\\\"\\n            ng-class=\\\"{\\n          'glyphicon-chevron-right': collapsed,\\n          'glyphicon-chevron-down': !collapsed\\n        }\\\"></span>\\n    </a>\\n    <label class=\\\"goods-node\\\">\\n      <input type=\\\"checkbox\\\"\\n             ng-model=\\\"node.checked\\\"\\n             ng-click=\\\"vm.nodeClickHandler(node)\\\"\\n             ng-disabled=\\\"vm.ngDisabled\\\"/>\\n      <span class=\\\"glyphicon goods-node-icon\\\"\\n            ng-class=\\\"{\\n          'glyphicon-folder-open': node[vm.config.fieldOfChildren] && !collapsed,\\n          'glyphicon-folder-close': node[vm.config.fieldOfChildren] && collapsed,\\n          'glyphicon-file': !node[vm.config.fieldOfChildren]\\n        }\\\"></span>\\n      {{node[vm.config.fieldOfName] || \\\"地级市地方\\\"}}\\n    </label>\\n  </div>\\n  <ol ui-tree-nodes=\\\"\\\" ng-model=\\\"node[vm.config.fieldOfChildren]\\\" ng-class=\\\"{hidden: collapsed}\\\">\\n    <li ng-repeat=\\\"node in node[vm.config.fieldOfChildren]\\\" ui-tree-node ng-include=\\\"'goods_nodes_renderer.html'\\\" collapsed=\\\"true\\\">\\n    </li>\\n  </ol>\\n</script>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/fancyui/lib/checkboxtree/template.html\n// module id = 502\n// module chunks = 21","import config from './default.config.js'\nclass CheckboxtreeController {\n  constructor() {\n    this.name = 'checkboxtree';\n    this.config = Object.assign({}, config, this.config);\n    this.listPromise.then(responce => {\n      this.list = responce;\n      this.formatList(this.list, this.ngModel);\n    });\n    this.ngModel ? '' : this.ngModel = [];\n  }\n\n  /**\n   * 节点点击处理：\n   * 1. 如果点击的是叶节点：\n   *   1.1如果所有兄弟节点都已选中：\n   *      1.1.1 如果此节点是checked状态\n   *          1.1.1.1 把父节点的状态置为checked\n   *          1.1.1.2 重复步骤1.1\n   *      1.1.2 如果此节点是unchecked的状态\n   *          1.1.2.1 把父节点的状态置为unchecked\n   *          1.1.2.1 重复执行1.1\n   * 2. 如果点击的是父节点：\n   *    2.1 执行1的逻辑；\n   *    2.2 toggle所有子节点的check状态:\n   * 3. 更新保存已选中节点的数组;\n   */\n  nodeClickHandler(node) {\n    if (!node[this.config.fieldOfChildren]) {\n      this.toggleUpNode(node);\n    } else {\n      this.toggleUpNode(node);\n      this.toggleDownNode(node);\n    }\n    this.updateModel(node);\n  }\n\n  /**\n   * 根据当前节点的checked状态来向上改变父级节点的状态\n   */\n  toggleUpNode(node) {\n    let flag = true, //标记父级状态是否由当前节点决定\n      siblings = this.getSiblings(node);\n    if(siblings && siblings){\n      siblings.forEach((item) => {\n        if (!item.checked) {\n          flag = false;\n        }\n      });\n    }\n    if (flag && node.parent) { //只有此情况下父节点的check状态才和当前节点有关，且和当前节点的checked状态一致\n      let parent = this.getNode(node.parent, this.list);\n      parent.checked = node.checked;\n      this.updateModel(parent);\n      this.toggleUpNode(parent);\n    }\n  }\n\n  /**\n   * 根据当前节点的checked状态来向下改变子级节点的状态\n   */\n  toggleDownNode(node) {\n    if (node[this.config.fieldOfChildren]) {\n      node[this.config.fieldOfChildren].forEach((item) => {\n        item.checked = node.checked;\n        this.updateModel(item);\n        this.toggleDownNode(item);\n      })\n    }\n  }\n\n  /**\n   * 监听点击事件，更新保存已选中节点\n   * @param node\n   */\n  updateModel(node){\n    if(node.checked){\n      this.ngModel.push(node);\n    }else{\n      let position;\n      this.ngModel.forEach((item, index) => {\n        if(item[this.config.fieldOfId] == node[this.config.fieldOfId]){\n          position = index;\n          return;\n        }\n      });\n      this.ngModel.splice(position,1);\n    }\n    this.ngModel = angular.copy(this.ngModel);\n  }\n\n  /**\n   * 根据ng-model传进来的checkedItems，来处理list，设置节点checked属性\n   * @param list\n   * @param checkedItems\n   */\n  formatList(list, checkedItems){\n    checkedItems.forEach(item => {\n      let targetNode = this.getNode(item[this.config.fieldOfId], list);\n      if(targetNode){\n        targetNode.checked = true;\n      }\n    });\n\n  }\n\n  /**\n   * 以下都是工具函数\n   */\n  /**\n   * 根据节点来获取兄弟节点（不包含当前节点）\n   * @param node\n   */\n  getSiblings(node) {\n    if(node.parent){\n      let parent = this.getNode(node.parent, this.list);\n      let copy = angular.copy(parent[this.config.fieldOfChildren]);\n      copy.forEach((item, index) => {\n        if (item[this.config.fieldOfId] == node[this.config.fieldOfId]) {\n          copy.splice(index, 1);\n        }\n      });\n      return copy;\n    }\n  }\n\n  /**\n   * 根据节点id来获取节点\n   * @param id\n   */\n  getNode(id, list) {\n    let targetNode;\n    let walkList = (id, list) => {\n      list.forEach(item => {\n        if (item[this.config.fieldOfId] == id) {\n          targetNode = item;\n          return false;\n        }\n        if (item[this.config.fieldOfChildren]) {\n          walkList(id, item[this.config.fieldOfChildren])\n        }\n      });\n    };\n    walkList(id, list);\n    return targetNode;\n  }\n\n}\n\nexport default CheckboxtreeController;\n\n\n\n// WEBPACK FOOTER //\n// ./~/fancyui/lib/checkboxtree/controller.js","/**\n * Created by fjywan on 16/6/20.\n */\n  //此配置主要用于避免或减少数据转换\nlet Config = {\n  //指示子节点的字段名\n  fieldOfChildren: 'children',\n  //指示节点名的字段\n  fieldOfName: 'categoryName',\n  //指示节点id的字段\n  fieldOfId: 'categoryId'\n};\n\n\nexport default Config;\n\n\n\n// WEBPACK FOOTER //\n// ./~/fancyui/lib/checkboxtree/default.config.js","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../css-loader/index.js!./../../../less-loader/index.js!./style.less\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../css-loader/index.js!./../../../less-loader/index.js!./style.less\", function() {\n\t\t\tvar newContent = require(\"!!./../../../css-loader/index.js!./../../../less-loader/index.js!./style.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/fancyui/lib/checkboxtree/style.less\n// module id = 505\n// module chunks = 21","exports = module.exports = require(\"./../../../css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".checkboxtree{color:red}#tree-root ol{list-style:none}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./~/less-loader!./~/fancyui/lib/checkboxtree/style.less\n// module id = 506\n// module chunks = 21"],"sourceRoot":""}