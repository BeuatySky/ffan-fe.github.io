{"version":3,"sources":["webpack:///build.min.js","webpack:///./client/app/components/build/build.js","webpack:///./client/app/components/build/build.component.js","webpack:///./client/app/components/build/build.html","webpack:///./client/app/components/build/build.controller.js","webpack:///./client/app/components/build/build.less?3fc6","webpack:///./client/app/components/build/build.less"],"names":["webpackJsonp","401","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_build","_build2","angular","component","402","_build3","_build4","restrict","bindings","template","controller","controllerAs","403","404","_classCallCheck","instance","Constructor","TypeError","BuildController","this","name","405","content","id","locals","406","push"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAASC,EAAQC,QAASC,GCHhC,YAUA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GARvFG,OAAOC,eAAeP,QAAS,cAC7BQ,OAAO,GAHT,IAAAC,GAAAR,EAAA,KAQIS,EAAUR,EAAuBO,EAIrCT,SAAQK,QAXOM,QAAQZ,OAAO,YAI7Ba,UAAU,QAJIF,EAAAL,UDwBTQ,IACA,SAASd,EAAQC,QAASC,GE1BhC,YAgBA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAdvFG,OAAOC,eAAeP,QAAS,cAC7BQ,OAAO,GAHT,IAAAC,GAAAR,EAAA,KAQIS,EAAUR,EAAuBO,GAPrCK,EAAAb,EAAA,KAWIc,EAAUb,EAAuBY,EAVrCb,GAAA,KAgBAD,QAAQK,SAbNW,SAAU,IACVC,YACAC,mBACAC,qBACAC,aAAc,OF+CVC,IACA,SAAStB,EAAQC,SGzDvBD,EAAAC,QAAA,83DH+DMsB,IACA,SAASvB,EAAQC,SIhEvB,YAMA,SAASuB,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAJhHpB,OAAOC,eAAeP,QAAS,cAC7BQ,OAAO,GAWT,IARqBmB,GACnB,QAAAA,KAAcJ,EAAAK,KAAAD,GACZC,KAAKC,KAAO,QAYhB7B,SAAQK,QAdasB,GJoFfG,IACA,SAAS/B,EAAQC,QAASC,GKxFhC,GAAA8B,GAAA9B,EAAA,IACA,iBAAA8B,SAAAhC,EAAAiC,GAAAD,EAAA,KAEA9B,GAAA,KAAA8B,KACAA,GAAAE,SAAAlC,EAAAC,QAAA+B,EAAAE,SL8GMC,IACA,SAASnC,EAAQC,QAASC,GMtHhCD,QAAAD,EAAAC,QAAAC,EAAA,MAKAD,QAAAmC,MAAApC,EAAAiC,GAAA","file":"build.min.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 401:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _build = __webpack_require__(402);\n\t\n\tvar _build2 = _interopRequireDefault(_build);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = angular.module('build', [])\n\t/**\n\t * 轻在routerConfig.js里定义路由\n\t */\n\t.component('build', _build2.default);\n\n/***/ },\n\n/***/ 402:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _build = __webpack_require__(403);\n\t\n\tvar _build2 = _interopRequireDefault(_build);\n\t\n\tvar _build3 = __webpack_require__(404);\n\t\n\tvar _build4 = _interopRequireDefault(_build3);\n\t\n\t__webpack_require__(405);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  restrict: 'E',\n\t  bindings: {},\n\t  template: _build2.default,\n\t  controller: _build4.default,\n\t  controllerAs: 'vm'\n\t};\n\n/***/ },\n\n/***/ 403:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<section class=\\\"intro-content\\\">\\n\\t<h1>环境搭建</h1>\\n\\t<p>介绍如何搭建环境及快速上手。</p>\\n\\t<h2>安装</h2>\\n\\t<p>git clone 项目（git地址git@work.dianshang.wanda.cn:bp-admin-fe/ffan-admin.git）</p>\\n\\t<p>安装依赖包：npm install</p>\\n\\n\\t<h2>运行</h2>\\n\\t<p>运行gulp启动调试。(如果提示错误请根据提示安装其他依赖包)</p>\\n</section>\\n\\n<section class=\\\"intro-content\\\">\\n\\t<h2>路由配置</h2>\\n\\t<p>在这里配置路由: client/app/router/routerConfig.js</p>\\n</section>\\n<div class=\\\"example-block\\\">\\n<div class=\\\"highlight no-border\\\" hljs hljs-language=\\\"javascript\\\">\\nexport default [\\n  {\\n    name: 'build',\\n    url: \\\"/demo/start\\\",\\n    template: '<build></build>',\\n    lazyload: require(\\\"bundle?lazy&name=start!../components/start/start.js\\\"),\\n    tracking: {\\n      key: 'ROUTENAME'\\n    }\\n  },\\n  {\\n    name: 'button',\\n    url: \\\"/demo/button\\\",\\n    template: '<button-demo></button-demo>',\\n    lazyload: require(\\\"bundle?lazy&name=button!../components/button/button.js\\\"),\\n    tracking: {\\n      key: 'ROUTENAME'\\n    }\\n  },\\n  {\\n    name: 'modal',\\n    url: \\\"/demo/modal\\\",\\n    template: '<modal></modal>',\\n    lazyload: require(\\\"bundle?lazy&name=modal!../components/modal/modal.js\\\"),\\n    tracking: {\\n      key: 'ROUTENAME'\\n    }\\n  }\\n]\\n</div>\\n</div>\\n\\n<section class=\\\"intro-content\\\">\\n\\t<h2>git分支</h2>\\n\\t<p>master分支: 框架(请基于此分支开发)</p>\\n\\t<p>demo分支: demo示例</p>\\n\\n\\t<h2>代理</h2>\\n\\t<p>为了方便本地调试和解决跨域问题, 在执行 gulp 启动调试时, 会启动代理服务器, 转发是可配置的, 见custom.env.config.js</p>\\n\\t<div class=\\\"example-block\\\">\\n\\t<div class=\\\"highlight no-border\\\" hljs hljs-language=\\\"javascript\\\">\\nmodule.exports = {\\n  /**\\n  * 要发布的项目路径\\n  */\\n  distPath: '../bptest',\\n  /**\\n  * 需要过滤的api, 解决跨域问题\\n  */\\n  apiFilter: ['/Database'],\\n  /**\\n  * 需要转发的域名, 一般是sit, 需要服务端先提交到sit\\n  */\\n  targetDomain: 'http://sop.sit.ffan.com/',\\n  /**\\n  * 登陆的cookie, 转发域名登陆的PHPSESSID, 这里暂时自己先登陆一下, 把cookie拷贝过来\\n  */\\n  cookie: 'PHPSESSID=sm9vejn7ffh0lqc0hfjklmd312'\\n};\\n\\t</div>\\n\\t</div>\\n</section>\"\n\n/***/ },\n\n/***/ 404:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * (description)\n\t * \n\t * @author yourname\n\t */\n\t\n\tvar BuildController = function BuildController() {\n\t  _classCallCheck(this, BuildController);\n\t\n\t  this.name = 'build';\n\t};\n\t\n\texports.default = BuildController;\n\n/***/ },\n\n/***/ 405:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(406);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(100)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/less-loader/index.js!./build.less\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/less-loader/index.js!./build.less\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n\n/***/ 406:\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(94)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"\", \"\"]);\n\t\n\t// exports\n\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// build.min.js","import buildComponent from './build.component';\nexport default angular.module('build', [])\n/**\n * 轻在routerConfig.js里定义路由\n */\n.component('build', buildComponent);\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./client/app/components/build/build.js","import template from './build.html';\nimport controller from './build.controller';\nimport './build.less';\n\nexport default {\n  restrict: 'E',\n  bindings: {},\n  template,\n  controller,\n  controllerAs: 'vm'\n};\n\n\n\n// WEBPACK FOOTER //\n// ./client/app/components/build/build.component.js","module.exports = \"<section class=\\\"intro-content\\\">\\n\\t<h1>环境搭建</h1>\\n\\t<p>介绍如何搭建环境及快速上手。</p>\\n\\t<h2>安装</h2>\\n\\t<p>git clone 项目（git地址git@work.dianshang.wanda.cn:bp-admin-fe/ffan-admin.git）</p>\\n\\t<p>安装依赖包：npm install</p>\\n\\n\\t<h2>运行</h2>\\n\\t<p>运行gulp启动调试。(如果提示错误请根据提示安装其他依赖包)</p>\\n</section>\\n\\n<section class=\\\"intro-content\\\">\\n\\t<h2>路由配置</h2>\\n\\t<p>在这里配置路由: client/app/router/routerConfig.js</p>\\n</section>\\n<div class=\\\"example-block\\\">\\n<div class=\\\"highlight no-border\\\" hljs hljs-language=\\\"javascript\\\">\\nexport default [\\n  {\\n    name: 'build',\\n    url: \\\"/demo/start\\\",\\n    template: '<build></build>',\\n    lazyload: require(\\\"bundle?lazy&name=start!../components/start/start.js\\\"),\\n    tracking: {\\n      key: 'ROUTENAME'\\n    }\\n  },\\n  {\\n    name: 'button',\\n    url: \\\"/demo/button\\\",\\n    template: '<button-demo></button-demo>',\\n    lazyload: require(\\\"bundle?lazy&name=button!../components/button/button.js\\\"),\\n    tracking: {\\n      key: 'ROUTENAME'\\n    }\\n  },\\n  {\\n    name: 'modal',\\n    url: \\\"/demo/modal\\\",\\n    template: '<modal></modal>',\\n    lazyload: require(\\\"bundle?lazy&name=modal!../components/modal/modal.js\\\"),\\n    tracking: {\\n      key: 'ROUTENAME'\\n    }\\n  }\\n]\\n</div>\\n</div>\\n\\n<section class=\\\"intro-content\\\">\\n\\t<h2>git分支</h2>\\n\\t<p>master分支: 框架(请基于此分支开发)</p>\\n\\t<p>demo分支: demo示例</p>\\n\\n\\t<h2>代理</h2>\\n\\t<p>为了方便本地调试和解决跨域问题, 在执行 gulp 启动调试时, 会启动代理服务器, 转发是可配置的, 见custom.env.config.js</p>\\n\\t<div class=\\\"example-block\\\">\\n\\t<div class=\\\"highlight no-border\\\" hljs hljs-language=\\\"javascript\\\">\\nmodule.exports = {\\n  /**\\n  * 要发布的项目路径\\n  */\\n  distPath: '../bptest',\\n  /**\\n  * 需要过滤的api, 解决跨域问题\\n  */\\n  apiFilter: ['/Database'],\\n  /**\\n  * 需要转发的域名, 一般是sit, 需要服务端先提交到sit\\n  */\\n  targetDomain: 'http://sop.sit.ffan.com/',\\n  /**\\n  * 登陆的cookie, 转发域名登陆的PHPSESSID, 这里暂时自己先登陆一下, 把cookie拷贝过来\\n  */\\n  cookie: 'PHPSESSID=sm9vejn7ffh0lqc0hfjklmd312'\\n};\\n\\t</div>\\n\\t</div>\\n</section>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/app/components/build/build.html\n// module id = 403\n// module chunks = 1","/**\n * (description)\n * \n * @author yourname\n */\n\nexport default class BuildController {\n  constructor() {\n    this.name = 'build';\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./client/app/components/build/build.controller.js","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/less-loader/index.js!./build.less\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/less-loader/index.js!./build.less\", function() {\n\t\t\tvar newContent = require(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/less-loader/index.js!./build.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/app/components/build/build.less\n// module id = 405\n// module chunks = 1","exports = module.exports = require(\"./../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./~/less-loader!./client/app/components/build/build.less\n// module id = 406\n// module chunks = 1"],"sourceRoot":""}